#include <bits/stdc++.h>
using namespace std;

typedef enum Color {
	NONE, RED, BLUE, REDBLUE
} Color;

class Solution {
private:
	int N;
	vector<vector<Color>> adj_matrix;
public:
	vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
       	N = n; 
		adj_matrix = vector<vector<Color>>(N);
		for (int i = 0; i < N; i++)
			adj_matrix[i] = vector<Color>(N, NONE);
		vector<int> res = vector<int>(N,-1);
		res[0] = 0;

		// get shortest path from node 0 to the ith node (aka 0 will always be 0)
		function<int(int,Color,vector<int>)> bfs = [&](int start, Color start_color, vector<int> visited){
			int level = 0;
			queue<int> q;
			q.push(start);

			Color curr_color = start_color;
			while (!q.empty()){
				Color next_expected_color = (curr_color == RED) ? BLUE : RED;
				int breadth = q.size();
				while (breadth--){
					int node = q.front(); q.pop();
					if (visited[node] >= N*(1.5f)) // <- TODO: we should find a better way to detect cycle!
						return INT_MAX;
					visited[node]++;
					if (node == 0){
						return level;
					}
					for (int neighbor = 0; neighbor < N; neighbor++){
						Color next_color = adj_matrix[node][neighbor];
						if (next_color and next_color == REDBLUE or next_color == next_expected_color){
							q.push(neighbor);
						}
					}
				}
				level++;
				curr_color = (curr_color == RED) ? BLUE : RED;
			}

			return INT_MAX;
		};

		for (vector<int> edge : redEdges){
			int src = edge[0], dest = edge[1];
			adj_matrix[dest][src] = RED;
		}
		for (vector<int> edge : blueEdges){
			int src = edge[0], dest = edge[1];
			(adj_matrix[dest][src] == RED) ? adj_matrix[dest][src] = REDBLUE : adj_matrix[dest][src] = BLUE;
		}

		for (int start = 1; start < N; start++){
			vector<int> visited(N, 0);
			int m = min(bfs(start,RED,visited),bfs(start,BLUE,visited));
			res[start] = (m == INT_MAX) ? -1 : m;
		}

		return res;
    }
};

int main(){
    Solution sol;
	// vector<vector<int>> redEdges = {{0,1},{1,2}}, blueEdges = {}; 
	// int n = 3; // -> [0,1,-1]
	// vector<vector<int>> redEdges = {{0,1}}, blueEdges = {{2,1}}; 
	// int n = 3; // -> [0,1,-1]
	// vector<vector<int>> redEdges = {{0,1},{1,2},{2,3},{3,4}}, blueEdges = {{1,2},{2,3},{3,1}};
	// int n = 5; // -> [0,1,2,3,7]
	// vector<vector<int>> redEdges = {{3,2},{4,1},{1,4},{2,4}}, blueEdges = {{2,3},{0,4},{4,3},{4,4},{4,0},{1,0}};
	// int n = 5; // -> ? [0,2,-1,-1,1] 
	
	// vector<vector<int>> redEdges = {{1,5},{2,2},{5,5},{3,0},{4,5},{2,4},{4,1},{1,0},{1,2},{5,2},{2,3},{0,1}}, blueEdges = {{4,4},{2,5},{1,1},{5,4},{3,3}};
	// int n = 6; // -> [0,1,3,-1,4,3]
	// vector<vector<int>> redEdges = {{2,6},{5,0},{5,5},{4,0},{2,0},{1,2},{0,2},{4,2},{1,6},{3,4},{6,1}},
	// 	blueEdges = {{2,0},{2,1},{3,4},{0,4},{2,6},{5,5},{5,2},{4,3},{1,3},{3,1},{1,5},{4,1},{4,4},{2,4},{1,6},{4,0},{5,6},{1,4},{3,3}};
	// int n = 7; // -> [0,2,1,4,1,4,2]
	// vector<vector<int>> redEdges = {{0,1}}, blueEdges = {{1,0}};
	// int n = 2; // -> [0,1]
	// vector<vector<int>> redEdges = {{1,8},{5,7},{1,2},{2,2},{7,4},{7,2},{3,8},{7,0},{1,5},{2,7},{2,3},{6,3},{3,0},{4,8},{7,5},{1,6},{3,7}}, 
	// 		 blueEdges = {{2,1},{1,4},{0,3},{0,5},{1,5},{8,2},{5,8},{2,6},{5,3},{6,7},{4,0},{2,2}};
	// int n = 9; // -> [0,5,3,1,8,1,5,2,2]
	// vector<vector<int>> redEdges = {{74,89},{32,85},{94,27},{13,29},{30,11},{44,75},{80,17},{56,86},{11,42},{40,38},{81,16},{0,4},{94,99},{88,42},{2,44},{56,81},{2,12},{35,61},{76,67},{53,90},{93,51},{35,84},{34,11},{17,7},{95,31},{94,6},{59,21},{92,58},{12,97},{11,35},{94,35},{5,89},{91,33},{41,14},{20,85},{70,87},{77,28},{9,69},{38,19},{93,9},{16,42},{99,26},{41,7},{80,81},{67,47},{35,23},{61,86},{53,93},{45,37},{33,65},{80,61},{4,50},{6,36},{74,6},{96,97},{62,2},{42,27},{76,19},{86,31},{66,16},{43,14},{51,77},{77,53},{28,43},{97,78},{95,26},{19,36},{4,33},{77,14},{5,77},{40,64},{73,80},{81,88},{85,30},{16,17},{31,10},{10,80},{12,94},{32,24},{82,35},{6,3},{26,85},{76,5},{45,41},{67,8},{27,34},{46,25},{84,7},{90,45},{11,60},{10,32},{8,34},{68,29},{35,91},{54,39},{68,34},{72,64},{93,86},{61,43},{53,56},{38,0},{71,51},{76,2},{27,41},{2,53},{32,70},{17,81},{43,97},{89,34},{94,66},{81,26},{37,86},{79,24},{40,97},{77,3},{78,10},{72,10},{59,98},{72,86},{70,17},{28,77},{82,72},{64,95},{37,54},{4,58},{28,50},{99,12},{65,50},{95,23},{86,2},{31,41},{27,85},{2,33},{42,45},{63,38},{18,31},{41,29},{5,7},{86,58},{79,22},{36,31},{18,29},{32,89},{39,1},{68,7},{76,57},{1,35},{39,33},{58,31},{89,73},{25,57},{32,5},{64,5},{16,88},{81,64},{32,86},{28,15},{49,66},{87,4}},
	// 		blueEdges = {{99,39},{8,45},{35,11},{52,19},{45,79},{47,86},{35,7},{82,9},{98,93},{76,70},{94,35},{51,0},{76,73},{98,96},{95,75},{72,83},{85,21},{26,21},{56,49},{30,21},{45,41},{74,17},{26,81},{28,63},{70,91},{60,82},{63,13},{75,7},{48,66},{47,45},{26,85},{45,43},{9,2},{91,24},{48,42},{76,43},{7,64},{59,5},{31,36},{66,34},{77,88},{98,13},{45,63},{67,16},{97,95},{36,39},{36,37},{98,60},{72,43},{85,2},{73,40},{80,83},{85,57},{87,65},{44,96},{87,4},{36,65},{25,8},{33,63},{70,81},{65,22},{67,80},{51,71},{51,48},{50,73},{42,98},{98,27},{44,93},{80,36},{16,58},{63,26},{72,60},{98,23},{6,87},{20,85},{58,77},{2,15},{47,94},{86,50},{71,61},{64,78},{62,0},{22,0},{10,78},{5,19},{37,31},{4,15},{9,11},{13,66},{57,49},{52,21},{28,66},{55,49},{99,87},{38,15},{49,33},{64,96},{70,52},{13,65},{1,5},{39,46},{4,39},{26,47},{10,70},{0,10},{50,97},{27,8},{58,17},{13,91},{97,79},{79,89},{7,21},{18,65},{44,52},{60,20},{98,71},{28,35},{88,20},{75,51},{92,26},{32,51},{93,22},{95,21},{52,12},{29,45},{1,22},{71,53},{64,6},{46,46},{23,37},{83,28},{80,77},{2,68},{80,14},{58,9},{58,7},{22,77},{20,1},{78,35},{35,28},{62,2},{65,86},{14,70},{52,70},{34,12},{43,17},{32,7},{76,35},{34,7},{6,85},{81,51},{68,38},{56,24},{51,29},{93,76},{37,42},{90,37},{90,0},{11,29},{22,14},{60,81},{76,29},{89,61},{97,11},{49,45},{57,53},{3,2},{92,69},{39,3},{69,36},{39,58},{44,30},{30,74},{74,48},{91,7},{88,96},{98,88},{75,8},{18,0},{46,51},{84,15},{85,23},{54,42},{19,59},{90,92},{93,34},{73,71},{97,33},{44,80},{23,26},{19,51},{3,42},{61,25},{50,31},{63,1},{85,18},{95,87},{97,40},{45,12},{58,85}};
	// int n = 100; // -> [0,3,5,4,1,4,11,3,7,8,1,8,6,15,3,2,6,6,9,8,11,6,4,6,7,7,7,6,4,8,7,4,2,3,8,5,3,7,5,2,9,7,5,7,6,6,-1,11,9,9,8,3,7,4,8,-1,10,8,7,13,10,6,-1,4,6,7,5,12,13,10,5,9,12,9,11,8,11,3,10,7,2,8,11,3,6,8,7,6,5,5,10,6,11,7,8,7,7,8,7,-1]
	vector<vector<int>> redEdges = {{1,8},{5,7},{1,2},{2,2},{7,4},{7,2},{3,8},{7,0},{1,5},{2,7},{2,3},{6,3},{3,0},{4,8},{7,5},{1,6},{3,7}},
			blueEdges = {{2,1},{1,4},{0,3},{0,5},{1,5},{8,2},{5,8},{2,6},{5,3},{6,7},{4,0},{2,2}};
	int n = 9; // -> [0,-1,3,1,-1,1,-1,2,2]

	vector<int> res = sol.shortestAlternatingPaths(n,redEdges,blueEdges);
	for (int num : res)
		cout << num << " ";
	cout << endl;
}
